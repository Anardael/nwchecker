<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.0.xsd">

    <changeSet id="7" author="Entro-Yuhim">
        <comment>
            Update dummy tasks to more real ones (source - timus)
        </comment>
        <sql>
			UPDATE `nwserver`.`task` SET `description`='Наверняка многие посетители кабинета декана матмеха УрГУ заметили стеклянную пирамиду, стоящую на его столе. Ходит легенда, что для некоторых посетителей кабинета эта пирамида запомнилась на всю жизнь как реквизит сурового испытания.\nВечный вопрос, который решает каждый декан — отчислить студента-двоечника прямо сейчас, или же дать ему еще один, очередной, самый-самый последний шанс? По легенде, некоторые двоечники, чтобы получить этот последний шанс, должны были за семьдесят перекатываний пирамиды по столу переместить её из исходного положения как можно ближе к другому положению. Обычно финальной точкой назначался лежащий на столе готовый приказ об отчислении, вернее, то его место, где декан должен был расписаться. Конечно, в конце своего путешествия пирамида должна снова стоять на своем основании, и в идеале она должна была закрыть место подписи.\nПосле того, как у студента кончались перекатывания, или он признавался, что ближе подкатить не сможет, просто замерялось расстояние от центра основания пирамиды до конечной точки. Легенда гласит, что если после манипуляций студента это расстояние оказывалось меньше, чем у двоечников-предшественников, то на этот раз он оставался на факультете...\nМожет быть, это просто красивая легенда, но вы можете зайти к Магазу Оразкимовичу и убедиться, что пирамида на столе стоит, и в её прозрачных глубинах по-прежнему клубится завораживающий золотой туман. Так что, на всякий случай, потренируйтесь в перекатывании — вдруг и вам когда-нибудь придется стоять перед столом с пирамидой.\nЛегенда ничего не говорит о форме пирамиды, но вы можете считать, что основание пирамиды — квадрат, а боковые грани — правильные треугольники. Перекатывать с одной грани на другую можно только через общее ребро, и только так, чтобы это ребро не смещалось по поверхности стола. Чтобы усложнить задачу, декан требует выполнения такого условия: если при перекатывании пирамида становится на квадратное основание через какое-то ребро, то следующим шагом ее можно перекатить только через противоположное ему. На перекатывания с треугольных граней ограничений нет.\nИсходные данные\nНа входе даны два числа — координаты точки стола, на которую надо переместить пирамиду. Длина ребра пирамиды равна в этой системе координат единице. В начальный момент времени центр основания находится в начале координат, и стороны основания пирамиды параллельны осям координат. Можно считать, что от стартовой до финальной точки по прямой не более 25 длин ребер пирамиды. Кроме того, любая разрешенная правилами последовательность перекатываний не приводит к падению пирамиды со стола.\nРезультат\nНа выход надо вывести наименьшее расстояние между центром основания пирамиды и конечной точкой, на которое можно переместить пирамиду не более чем за семьдесят перекатываний с точностью 4 знака после запятой. Стороны основания в конечном положении не обязательно должны быть параллельны осям координат, однако пирамида должна стоять на своем основании.\n' WHERE `id`='1';
			UPDATE `nwserver`.`task` SET `description`='— Мы называем этот спутник Владя. Как вам известно, у Владиславы есть еще один спутник, тоже искусственный и тоже неземного происхождения. Он меньше по размерам. Мы называем его Слава. Вы понимаете? Планета называется \"Владислава\". Естественно назвать два ее спутника \"Владя\" и \"Слава\". Не так ли?\n— Да, конечно, — сказал Горбовский. Это изящное рассуждение было ему знакомо. Он слышал его в третий раз. — Это вы очень остроумно предложили, Август. Владя и Слава — Владислава. Прекрасно!\n— У вас на Земле, — продолжал Бадер неторопливо, — эти спутники называют \"Игрек-один\" и \"Игрек-два\", соответственно — Владя и Слава. Но мы - мы называем их иначе. Мы называем их Владя и Слава.\nОн строго поглядел на Валькенштейна. Валькенштейн играл желваками на скулах. Насколько было известно Валькенштейну, \"мы\" — это был сам Бадер и только Бадер.\"\nНа планете Владислава обнаружены артефакты внеземных цивилизаций в количестве N штук.\nИсследовательский звездолет вышел на орбиту планеты и запустил автоматические зонды, которые обнаружили, что из-за неровного рельефа атмосферный катер может сесть только в одной из M точек планеты. Так как передвижение по планете происходит медленно, нужно для каждого артефакта найти ближайшую посадочную площадку.\nИсходные данные\nВ первой строке записаны числа N и M (1 ≤ N, M ≤ 5000) — количество артефактов и точек посадки соответственно. Затем записан радиус планеты R — положительное действительное число; R ≤ 1000. Далее следует M строк, в каждой из которых записаны широта и долгота одной из точек посадки Wi, Li — действительные числа |Wi| ≤ 90, |Li| ≤ 180. В следующих N строках записаны координаты артефактов — широта и долгота wi, li — действительные числа |wi| ≤ 90, |li| ≤ 180. Все действительные числа округлены до 6 знаков после десятичной точки.\nРезультат\nСледует вывести ровно N строк. В i-й строке должно быть записано расстояние от i-го артефакта до ближайшей точки посадки с точностью до 2-х знаков после запятой.' WHERE `id`='2';
			UPDATE `nwserver`.`task` SET `description`='Янус Полуэктович (не помню уже, А или У) воспользовался машиной только один раз. Он принес с собой небольшую полупрозрачную коробочку, которую присоединил к \"Алдану\". Примерно через десять секунд работы с этой приставкой в машине полетели все предохранители, после чего Янус Полуэктович извинился, забрал свою коробочку и ушел.\nНравится Саше Привалову – молодому программисту НИИ Чародейства и Волшебства – в Соловце. Что может быть лучше, чем после института и скучной работы в Ленинграде, оказаться единственным программистом на такой машине как Алдан-3. Единственная проблема – это Янус Полуэктович.\nВ первый же рабочий день Янус задал Алдану задачу о свертке пространства заклинаний по четырем измерениям. ЭВМ задумалась, пошуршала лентами, поморгала лампочками и отключилась. Сгорел предохранитель. Поменять его даже для программиста – минутное дело. Все бы ничего, если бы Янус не был болезненно рассеян. Эта задача его интересовала настолько, что он помнил про сгоревший предохранитель только один день. На третий день Янус снова спалил Алдан. Четвертый прошел спокойно. Пятый снова подарил Алдану посредством Януса новый предохранитель.\nСаша уже и думать об этом перестал, нужно только запастись заранее достаточным числом предохранителей.\nВаша цель помочь ему подготовить заказ для отдела снабжения. Заказ на предохранители составляется на некоторый промежуток времени от A-го Сашиного рабочего дня, до B-го включительно. Помогите Саше посчитать, сколько раз спалит Янус злосчастный предохранитель за этот промежуток времени.\nИсходные данные\nПервая строка содержит целое число A. Вторая строка содержит целое число B. 1 ≤ A ≤ B ≤ 10000.\nРезультат\nВыведите единственное число – количество предохранителей, которые спалит Янус в интервал времени с A-го рабочего дня по B-й.' WHERE `id`='3';
			UPDATE `nwserver`.`task` SET `description`='С пробками на дорогах все знакомы не понаслышке. Проложить оптимальный маршрут проезда через центр города, перегруженный в час пик, не сможет, пожалуй, даже суперкомпьютер. Но вот смоделировать потоки транспорта вполне под силу.\nДля этого производится следующий эксперимент. На сетке улиц города выбираются несколько контрольных точек. Среди контрольных точек выбирается одна целевая точка T. И изо всех контрольных точек (кроме T) в точку T по кратчайшему маршруту отправляется по одной машине. В целевой же точке фиксируется, сколько машин прибыло в эту точку с севера, сколько с юга, сколько с запада и сколько с востока. Соответственно, можно судить о загруженности подъездов к целевой точке.\nВам предлагается провести такой эксперимент. Нет, машины Вам не полагается. И ехать никуда не нужно. Нужно всего лишь написать программу, моделирующую описанный эксперимент.\nИсходные данные\nВвод содержит описание плана города в следующем формате. В первой строчке находятся два целых числа W и H (1 ≤ W, H ≤ 500), ширина и высота плана. В следующих H строках описывается сетка улиц и контрольные точки. Символом ‘.’ обозначается место, занятое зданиями. Символом ‘#’ обозначаются фрагменты дорог. Символом ‘o’ (строчная латинская) обозначаются контрольные точки. Фрагмент дороги всегда занимает ячейку плана полностью. Два элемента дороги относятся к одной дороге только в том случае, когда имеют общую сторону.\nПосле описания плана города следует серия заданий на моделирование эксперимента. Сначала указывается количество заданий M (0 ≤ M ≤ 20), а в каждой из последующих M строчек задается номер целевой точки T для соответствующего эксперимента. Предполагается, что контрольные точки на плане перенумерованы снизу вверх и слева направо.\nЕсли оказывается, что какая-то машина должна выбирать дальнейший маршрут из нескольких кратчайших, действует следующая схема приоритетов на дальнейшее движение: юг, север, запад, восток.\nРезультат\nВыведите результат для каждого из экспериментов в следующем формате:\nExperiment #N: North: Rn, South: Rs, East: Re, West: Rw\nгде Rn, Rs, Re и Rw – количество машин, прибывшее в эксперименте с номером N в целевую точку с севера, юга, востока и запада соответственно.\n' WHERE `id`='4';
			UPDATE `nwserver`.`task` SET `description`='На прямоугольном поле из X на Y квадратных клеток находится куб со стороной, равной длине стороны клетки. За один ход куб может перекатываться через ребро, перемещаясь на соседнюю по вертикали или горизонтали клетку. Между некоторыми клетками могут стоять стенки, которые являются препятствиями. Куб не может перекатываться через препятствия. Куб также не может покидать пределы поля.\nТребуется определить минимальное число ходов, необходимых для того, чтобы переместить куб из заданной начальной клетки с координатами A и B в заданную конечную клетку с координатами C и D. При этом в конечном положении верхняя грань должна быть та же, что и в начальном положении.\nИсходные данные\nВ первой строке входа указаны размеры поля X (по горизонтали) и Y (по вертикали), отделенные друг от друга одним или несколькими пробелами. Таким же образом во второй строке указаны A и B, а в третьей – C и D. Далее может следовать информация о стенках. Все числа целые; 2 ≤ X,Y ≤ 10.\nПосле символа ‘v’, расположенного в отдельной строке, перечисляются пары чисел, говорящие о вертикальных стенках. Здесь пара чисел N и M определяет стенку между клетками N,M и N+1,M. Каждая пара чисел расположена в отдельной строке. Пустых строк между парами нет.\nПосле символа ‘h’, стоящего в отдельной строке, перечисляются (таким же образом) пары чисел, говорящие о горизонтальных стенках. Пара чисел N и M определяет стенку между клетками N,M и N,M+1.\nРезультат\nВаша программа должна записать единственную строку, содержащую минимальное число ходов. При невозможности перемещения в эту строку следует записать текст “No solution”.' WHERE `id`='5';
			UPDATE `nwserver`.`task` SET `description`='Среди заданного множества отрезков прямой с целочисленными координатами концов [Li, Ri] необходимо выбрать подмножество наименьшей мощности, целиком покрывающее отрезок [0, M], где M – целое положительное число.\nИсходные данные\nВ первой строке записано целое число M (1 ≤ M ≤ 5000). В последующих строках перечислены пары целых чисел Li и Ri (−50000 ≤ Li &#60; Ri ≤ 50000), каждая пара с новой строки, числа в парах отделены друг от друга одним пробелом. В последней строке записана пара нулей. Множество содержит не менее одного и не более 99999 отрезков.\nРезультат\nПрограмма должна формировать в первой строке требуемое минимальное число отрезков из исходного множества, необходимое для покрытия отрезка [0, M]. Далее должен следовать список покрывающего подмножества, упорядоченный по возрастанию координат левых концов отрезков. Список отрезков выводится в том же формате, что и во входe, завершающую пару нулей выводить не следует.\nЕсли покрытие отрезка [0, M] исходным множеством отрезков [Li, Ri] невозможно, то следует вывести единственную фразу «No solution».' WHERE `id`='6';
			UPDATE `nwserver`.`task` SET `description`='Две противоположные вершины прямоугольного параллелепипеда A с рёбрами, параллельными осям координат, имеют координаты (0,0,0) и (u,v,w) соответственно (0 &#60; u &#60; 1000, 0 &#60; v &#60; 1000, 0 &#60; w &#60; 1000).\nМножество S из n точек задается тройками координат (x(i), y(i), z(i)), 1 ≤ i ≤ n ≤ 50, при этом ни одна пара точек из S не лежит на прямой, параллельной какой-либо грани A.\nНайти такой прямоугольный параллелепипед G максимального объёма, что все его ребра параллельны ребрам A, G полностью лежит в A (G и A могут иметь общие граничные точки) и ни одна точка из S не лежит внутри G (но может лежать на его границе).\nИсходные данные\nВ 1-й строке находятся числа u, v, w, разделённые одним пробелом. Во 2-й строке - целое число n, в 3-й, …, (n+2)-й строках - числа x(i), y(i), z(i), разделённые одним пробелом.\nВсе координаты лежат в пределах от 0 до 1000 и записаны не более чем с двумя десятичными знаками после десятичной точки.\nРезультат\nПрограмма должна выдавать единственное число – величину объёма G с двумя десятичными знаками. В случае, если истинный объём параллелепипеда G содержит больше двух десятичных знаков, следует произвести округление до двух знаков по обычным математическим правилам.' WHERE `id`='7';
			UPDATE `nwserver`.`task` SET `description`='Пусть на плоскости задано конечное множество точек M в декартовой системе координат. Правильной выпуклой оболочкой множества M называется минимальное по включению выпуклое множество, содержащее M и ограниченное замкнутой ломаной, звенья которой либо параллельны одной из осей координат, либо наклонены к ним под углом 45°.\nНапишите программу, которая по заданному множеству M строит его правильную выпуклую оболочку.\nИсходные данные\nВ первой строке содержится число N – количество последующих строк. Число N не менее единицы и не более 100 000. Во второй и последующих строках содержатся координаты точек множества. В каждой строке записаны координаты одной вершины, абсцисса и ордината разделены одним или несколькими пробелами. Каждая координата – целое число от 0 до 1000 включительно. Координаты одной и той же точки могут повторяться несколько раз в разных строках (т.е., в процессе перечисления точек множества одна и та же точка может встретиться неоднократно).\nРезультат\nПрограмма должна выдать последовательность вершин искомой ломаной. Вершины должны быть перечислены в порядке обхода против часовой стрелки, в качестве начальной вершины может быть выбрана любая из вершин ломаной. В каждой строке следует записывать координаты ровно одной вершины, сначала абсциссу, а затем – ординату, разделяя их одним или несколькими пробелами. Каждая вершина ломаной должна быть выведена ровно один раз.\nНикакие три записанные в выходных данных подряд вершины не должны лежать на одной прямой, кроме того, на одной прямой не должны лежать тройки “первая и две последних перечисленных вершины”, “последняя и две первых перечисленных вершины”.' WHERE `id`='8';
			UPDATE `nwserver`.`task` SET `description`='Пусть задана последовательность из N целых неотрицательных чисел. Медианой такой последовательности в случае нечетного N называется элемент, который будет равноудален от концов последовательности, если ее отсортировать по возрастанию или убыванию (нетрудно сообразить, что этот элемент имеет номер (N+1)/2 в отсортированной последовательности, если номера считать с единицы). В случае четного N медианой называется среднее арифметическое двух элементов, которые окажутся на местах N/2 и (N/2)+1, если последовательность отсортировать. Однако исходная последовательность не обязана быть отсортированной.\nНапишите программу, которая по заданной входной последовательности вычисляет ее медиану.\nИсходные данные\nВ первой строке входа содержится число N — длина последовательности. Во второй и последующих строках расположены сами элементы последовательности, по одному в каждой строке. Длина последовательности — целое число от единицы до 250 000. Каждый элемент последовательности — целое число от 0 до (2^31−1) включительно.\nРезультат\nПрограмма должна выдать значение медианы с точностью до одного десятичного знака.' WHERE `id`='9';
			UPDATE `nwserver`.`task` SET `description`='Как правило, жюри олимпиад по программированию норовит дать к каждой задаче «сказку», цели которой — наметить мнимую связь задачи с реальностью, а также замутить воду вокруг сути задачи, особенно если условие задачи кажется слишком простым для понимания. Однако в данной задаче сказки не будет – во-первых, потому, что условие является достаточно непростым и необычным, а во-вторых, потому что сама задача — о краткости.\nПусть дан некоторый текст. Архивом этого текста называется текст, удовлетворяющий следующим требованиям:\nАрхив является программой на одном из языков программирования, допустимых правилами соревнований.\nПервой строкой архива является либо строка «{PAS}», либо строка «/*C*/», либо строка «//CPP».\nЕсли архив скомпилировать и выполнить, то программа выдаст на стандартный выход текст, в точности совпадающий с исходным.\nРазмер архива строго меньше размера исходного текста.\nТребуется написать программу, которая по заданному тексту строит его архив. При проверке посланного командой решения, архив компилируется и исполняется с использованием тех же ограничений, параметров и условий, что и решения участников. Архив не обязательно должен быть программой на том же языке, что и решение. При проверке, жюри определяет язык архива по его первой строке («{PAS}» — Pascal/Delphi, «/*С*/» — С, «//CPP» — C++).\nИсходные данные\nТекст длиной не менее 20000 и не более 200000 символов. Текст может содержать большие и маленькие латинские буквы, цифры, знаки препинания, пробелы, переводы строк, кавычки. Гарантируется, что все тексты, использованные в качестве тестов к задаче, являются литературными текстами на английском языке.\nПримечание. Пример входа (см. ниже) является условным, поскольку не удовлетворяет требованиям литературности и минимальной длины.\nРезультат\nАрхив исходного текста.' WHERE `id`='10';
			UPDATE `nwserver`.`task` SET `description`='Спор — великое дело. В споре рождается истина. Вот, например, два организатора чемпионата Урала поспорили. Один говорит, что на чемпионат по программированию давать задачи на подсчет функций глупо и бесполезно. И аргументирует это тем, что когда определение функции известно, и есть время на подготовку, можно очень быстро посчитать значение любой числовой функции в любой точке. А другой говорит, что не любая функция считается быстро, и додуматься ещё ведь надо. Конечно, за разногласия в стане жюри приходится расплачиваться участникам. И теперь Вам следует продемонстрировать, что Вы действительно способны быстро посчитать значение заданной функции в заданной точке.\nФункция f(n) (n – целое) задана рекуррентно следующими формулами:\nf(0) = 0,\nf(n) = g(n, f(n-1)),\nгде g(x,y) = ((y-1)x5 + x3 – xy + 3x + 7y) % 9973, % означает операцию взятия остатка от деления на число.\nИсходные данные\nНа входе в первой строчке находится единственное целое число n в диапазоне от 0 до 108.\nРезультат\nНа выход следует выдать единственное целое число: значение функции f(n). Причем сделать это очень быстро.' WHERE `id`='11';
			UPDATE `nwserver`.`task` SET `description`='Вы никогда не слышали об ACM? Вполне возможно. Ведь ACM — это новая разработка лаборатории вычислительных машин. И ACM (Abstract Computation Machine) — это не что иное, как новый прибор для проведения весьма сложных вычислений. Одна загвоздка: как всегда, в самом начале опытный образец не желает работать. Требуется диагностика, чтобы выяснить, что же именно неисправно.\nЧто же известно про конструкцию прибора? Он содержит L независимых регистров, каждый из которых способен хранить целое число в диапазоне от 1 до M. Не все регистры используются для вычислений — некоторое их число отвечает за контроль ошибок. Каким образом? Очень просто: значения в этих регистрах аппаратно выбираются так, чтобы сумма значений всех регистров прибора всегда делилась на некое изначально заданное число K. Проверено, что механизм поддержания делимости работает исправно, следовательно, сумма значений всех регистров действительно все время делится на число K.\nСодержимое регистров ACM полностью определяет состояние устройства. Так что для точной диагностики достаточно лишь узнать содержимое всех регистров. Но вот незадача: разработчики, готовившие процедуру диагностики устройства, решили оптимизировать представление диагностической информации. И для этого вместо простого списка содержимого регистров решили выдавать единственное число — код состояния.\nКод состояния должен полностью описывать состояние машины. Поэтому разработчики решили вычислять его следующим образом. Состояние машины — это произвольный вектор длины L (содержимое регистров), удовлетворяющий названным выше условиям. Так вот, в качестве кода состояния был выбран индекс вектора текущего состояния машины в отсортированном лексикографически по возрастанию списке всех возможных ее состояний (первое состояние в списке имеет индекс 0).\nКонечно же, такой код состояния действительно однозначно описывает состояние прибора, но теперь перед разработчиками встала проблема. Требуется по коду состояния восстановить содержимое всех регистров прибора. Вот для этого и требуется ваша помощь. Недаром теперь аббревиатура ACM — не пустой звук для вас.\nИсходные данные\nВ первой строке входа находятся три числа L, M и K (1 ≤ L ≤ 100; 2 ≤ M ≤ 50; 1 ≤ K ≤ 50). Во второй строке находится целое число N — код состояния, возвращенный прибором.\nРезультат\nНа выход следует выдать состояние регистров машины, соответствующее коду N. То есть L целых чисел, разделенных пробелами.' WHERE `id`='12';
			UPDATE `nwserver`.`task` SET `description`='Как говорит народная мудрость, каждый мужчина должен в своей жизни построить дом, посадить дерево и вырастить сына. Вот и программист Петров решил не отставать от других и приступить к строительству собственного кирпичного дома. Петров полагал, что обладает неплохим художественным вкусом, и оформил фасад особняка кирпичной кладкой. Он старательно прикрепил на раствор каждый кирпич к вертикальной стене. Получилось замечательно. Каждый кирпич располагался горизонтально и ни один не опирался на 2 или более кирпичей следующего под ним слоя. Петров закончил работу и задумался. Пройдет время и раствор может потрескаться, а ведь так хочется, чтобы эта красота стояла веками. А будет ли все это устойчиво даже без раствора? Требовались сложные расчеты, учитывающие, что все кирпичи при различной длине имеют одинаковые высоту, толщину и плотность, а также нужно учесть, что кирпич (или система кирпичей), имеющий центр масс точно на границе опоры или за её пределами, по мнению Петрова неустойчив.\nИсходные данные\nВ первой строке входа содержится целое число Н — количество слоев кирпичей, т.е. высота стены (0 ≤ H ≤ 10000). Информация о кирпичах задается по слоям, начиная с верхнего. Для каждого слоя указываются: К — количество кирпичей в очередном слое (0 ≤ K ≤ 1000), и в отдельных строках через пробел L1 и R1 — левая и правая граница первого кирпича текущего слоя, L2 и R2 — левая и правая граница второго кирпича и так далее вплоть до LK и RK (левая и правая границы К-того кирпича). Конечно же, Li &#60; Ri &#60; Li+1. Известно также, что 0 ≤ Li,Ri ≤ 10000, все координаты — целые числа. Общее число кирпичей не превышает 106.\nРезультат\nРезультатом работы программы должно быть слово Yes при устойчивой конструкции или слово No, если что-нибудь обрушится.' WHERE `id`='13';
			UPDATE `nwserver`.`task` SET `description`='Когда б вы знали, из какого сора порой рождаются задачи для чемпионата Урала! Вот, например, зашел однажды один из организаторов в столовую перекусить. Взял суп (большая круглая тарелка), салат (круглая тарелка поменьше) и чай (кружка на круглом же блюдце) и попытался разместить все это на небольшом прямоугольном подносе. Это оказалось не так уж просто… «Да уж, незадача…» пробормотал он. «Хотя почему незадача? Как раз задача! Прямо-таки замечательная задача на чемпионат Урала!!!»\nИ в самом деле, из такой бытовой сценки родилась задача. Именно её вам и предлагается решить. Вам выдадут размеры подноса и всех трёх тарелок, а вы попробуйте их разместить. Конечно же, тарелки не должны выходить за пределы подноса и не могут пересекаться. Хотя они могут касаться и друг друга, и краёв подноса.\nИсходные данные\nНа входе даны длины сторон прямоугольного подноса H и W, далее идут радиусы тарелок R1, R2, R3. Все числа целые, положительные и не превосходят 106. Числа разделены пробелами или переводами строк.\nРезультат\nНа выход выведите либо одно число 0, если размещение невозможно, или же, если размещение возможно, выведите три пары чисел — координаты центров тарелок при предлагаемом вами размещении их на подносе. Координаты должны быть выведены с точностью до 4 знаков после десятичной точки, в системе координат с центром в углу подноса, осью X направленной вдоль стороны подноса, длина которой указана первой, осью Y направленной вдоль стороны подноса, длина которой указана второй. Порядок указания координат центров тарелок должен соответствовать порядку указания их радиусов во входных данных.' WHERE `id`='14';
			UPDATE `nwserver`.`task` SET `description`='Уральские медики очень озабочены состоянием здоровья молодежи. Как показали исследования, многие талантливые студенты вместо того, чтобы играть в футбол, кататься на коньках или велосипедах, занимаются олимпиадами по программированию. Так они это еще и спортивным программированием называют! Ну какой же это спорт, сидеть перед монитором и думать по пять часов в день! И ладно бы только на соревнованиях два раз в год, так ведь при подготовке к очередному чемпионату у них на сидение за компьютером уходит по несколько дней в неделю! И пусть бы это были разгильдяи какие-то, так ведь лучшие студенты, говорят, что и на мировом уровне результаты показывают приличные — жалко молодежь!\nЧтобы отучить студентов от вредной привычки часами сидеть у компьютеров, уральские медики придумали принципиально новую разработку — монитор с диагональной разверткой! В скором будущем его будут вручать победителям и призерам чемпионатов Урала. В специально разработанном квадратном мониторе электронный луч должен проходить экран не по горизонталям, а по диагоналям. Поскольку длины диагоналей разные, нестандартные параметры мерцания и нелинейные искажения изображения быстро отучат оболтусов пялиться в экран. Разумеется, им ничего не останется делать, кроме как идти и заниматься спортом. Проблема в том, что большинство видеокарт подают на вход монитору нормальную развертку. Для успешного внедрения нового типа монитора нужна программа-адаптер, которая преобразует квадратное изображение в формат, требуемый для ввода в квадратный монитор. Программа должна быть надежной и быстрой, поэтому её разработкой будут заниматься самые лучшие программисты — участники чемпионата Урала по спортивному программированию.\nИсходные данные\nВ первой строке записано целое число N (1 ≤ N ≤ 100) — количество пикселей на стороне квадратного монитора. Далее идут N строк, в каждой по N целых чисел в пределах от 1 до 100, разделенных пробелом. Это изображение, которое выводит обычная видеокарта (как видно, глубина цветности у нового монитора небольшая, все равно нормальному программисту больше ста цветов и не надо).\nРезультат\nНа выходе преобразователя должна получиться последовательность для ввода в новый монитор. Пиксели нумеруются от левого верхнего угла, по диагоналям, слева-направо и снизу-вверх. Подробнее объяснять тут долго и неинтересно, посмотрите на пример, дальше сами догадаетесь.' WHERE `id`='15';
			UPDATE `nwserver`.`task` SET `description`='Милиционеры упустили преступника — он скрылся от них в запутанной сетке линий Екатеринбургского метрополитена, где преследование лишено всякого смысла. Преступник не знает о том, что на его одежде — радиомаяк, который дает сигнал в милицию с каждой станции, которую посещает или проезжает преступник (в тоннелях между станциями запеленговать преступника невозможно, сигнал маяка для этого слишком слаб). Получая информацию о последовательности станций, которые проезжает преступник, милиционеры хотят сузить круг поисков: установить, на какие станции преступник может отправляться, чтобы установить дежурные посты именно на этих станциях.\nМилиционерам известно, что преступник ведет себя вполне логично: скрывшись в метро, он сразу наметил себе цель (ту станцию, около которой расположено его укрытие) и движется туда по какому-либо из кратчайших путей. Длина пути с точки зрения преступника определяется исключительно количеством перегонов на пути, и не зависит ни от длины перегонов, ни от количества пересадок.\nИсходные данные\nВ первой строке записано число N — количество линий метро в Городе, 1 ≤ N ≤ 50. Далее следуют N строк, каждая из которых содержит описание линии. Описание линии начинается с целого числа K (количество станций), 2 ≤ K ≤ 50, далее через пробел следуют цифровые индексы станций линии (K чисел, в том порядке, в котором следуют остановки) — целые числа в пределах от 1 до 32767. Если в описании двух различных линий встречается один и тот же индекс станции, это значит, что эти линии на данной станции пересекаются и имеют точку пересадки. Две линии могут пересекаться друг с другом несколько раз, линия также может иметь произвольное количество точек самопересечения. В последней строке следуют данные пеленга: целое число M ≥ 1 (количество станций, на которых был запеленгован преступник) и далее через пробел M чисел — индексы станций, с которых был получен пеленг, в том порядке, в котором преступник их проследовал.\nРезультат\nВыведите в порядке возрастания, по одному числу в строке, индексы всех тех станций, на которые может направляться преступник.' WHERE `id`='16';
			UPDATE `nwserver`.`task` SET `description`='Спелеология — увлекательное занятие. Но оно сопряжено с определенным риском. По статистике МЧС, наиболее часто несчастные случаи случаются со спелеологами весной, из-за неожиданных затоплений пещеры. За последние несколько лет было проведено столько спасательных операций! А на каждую требуется немалое количество ресурсов — людских, финансовых… В целях экономии средств, на последнем экстренном заседании министерства было принято следующее решение:\n-----------------------\nПриказ № 321/1.\nВ целях экономии средств на весенних спасательных операциях, приказываю:\nСоздать базу данных всех пещер и всех спелеологов РФ.\nВывести на геостационарную орбиту 12 спутников С-349857 для реализации возможности точного определения расположения спелеолога в пещере.\nПривлечь программистов к разработке системы управления спутниками.\nСоздать прибор, взаимодействующий со спутниками, предназначенный для автоматической выдачи спелеологу инструкций по спасению. Описание требований к программному комплексу — приложения А и Б к данному приказу.\nОбязать спелеологов брать с собой спецоборудование МЧС для экстренной связи с центром спасательных операций. В том числе прибор, выдающий инструкции по спасению.\nМинистр. (министр@мчс.ру)\nПриложение А. Требования к прибору.\nПрибор состоит из двух подсистем.\nПодсистема детектирования возможности автоматического спасения (ПДВАС).\nпо известной конфигурации пещеры необходимо определить, какая часть ее заполнена водой.\nпо известному положению спелеолога и данным о том, сколько он может держаться под водой без воздуха, определить, возможно ли его автоматическое спасение.\nПодсистема выдачи инструкций по автоматическому спасению (ПВИПАС — спелеологический компас):\nпо известной точке, где находится спелеолог, определить, куда двигаться дальше, чтобы гарантированно выбраться на поверхность.\nПриложение Б. Принципы заполнения пещер водой.\nДанный документ является результатом исследований ИПИ (Институт Пещерных Исследований при МЧС России — ипи@мчс.ру). Пещера заполняется водой по следующему принципу:\nПещера рассматривается, как набор квадратных ячеек.\nЯчейка заполняется водой, если существует путь из нее на поверхность.\nПуть — это цепочка ячеек, имеющих общую сторону.\nПри этом рассматриваются лишь пути идущие из ячейки на поверхность, не имеющие сегментов, спускающихся вниз.\n-----------------------\nК сожалению, как обычно, вместо занятий своей основной работой, все сотрудники ВЦ МЧС (вц@мчс.ру) заняты подготовкой Чемпионата Урала. Так что реализовывать логику работы ПДВАС предстоит именно вам.\nИсходные данные\nВ первой строке находятся 5 чисел: W, H, X, Y, D — соответственно, ширина и глубина пещеры (в ячейках), координаты положения спелеолога, количество ячеек, которые может проплыть спелеолог. Далее идет H строчек, описывающих конфигурацию пещеры. Каждая строчка содержит ровно W символов: символ \"#\" — обозначает стену, т.е. ячейку, недоступную ни для спелеолога, ни для воды; символ \".\" (точка) обозначает воздух, т.е. ячейку, доступную для спелеолога и, возможно, для воды. Система должна быть способна работать в следующем диапазоне параметров: 1 ≤ W, H ≤ 500; 1 ≤ X ≤ W; 1 ≤ Y ≤ H. 1 ≤ D ≤ 1000. Ячейки нумеруются слева направо, снизу вверх. Гарантируется, что, пока пещера не затоплена, спелеолог может самостоятельно выбраться на поверхность.\nРезультат\nВыведите «Can be rescued by himself», если спелеолог может выбраться из пещеры самостоятельно. В противном случае выведите «Rescue operation required».' WHERE `id`='17';
			UPDATE `nwserver`.`task` SET `description`='В стране дефицит чугунных болванок. Их продают на электронных торгах. Покупатели заявляют цену, по которой они готовы купить (цена лежит в пределах от 0.01 до 10000.00 бибриков и содержит не более 2 знаков после десятичной точки). Время от времени появляется продавец и выставляет на торги К болванок по цене X. Первые К покупателей, предложивших цену X или большую, получают по одной болванке. Если таких покупателей оказывается меньше, чем К, то нераспроданные болванки отправляются на переплавку.\nВне зависимости от того, досталась ли покупателю болванка из очередной партии, его заявка остаётся в силе и действует до тех пор, пока он в явном виде не отзовёт её.\nС каждой проданной болванки биржа получает комиссию в размере 0.01 бибрика. Требуется разработать программу, рассчитывающую прибыль биржи по итогам торгов на основании журнала всех операций.\nИсходные данные\nВо входных данных содержится журнал, в каждой строке которого находится описание одной операции. Операции бывают трёх видов:\n«BID X» — покупатель делает заявку на покупку болванки по цене X.\n«DEL X» — покупатель снимает заявку на покупку по цене X.\n«SALE X K» — продавец выставляет на продажу К болванок по цене X.\nМаксимальное количество операций в журнале — 100000. Последняя строка журнала содержит команду «QUIT». Журнал не содержит внутренних противоречий (например, первая запись «DEL X» не может встретиться раньше первой записи «BID X» и т.д.).\nРезультат\nТребуется вывести прибыль биржи в бибриках с двумя знаками после десятичной точки.' WHERE `id`='18';
			UPDATE `nwserver`.`task` SET `description`='Для защиты от крупных градин автостоянки сделана специальная установка. Крупные градины засекаются радаром, после чего мощный лазер просто испаряет их. Автостоянка представляет собой выпуклый многоугольник и ограничена высоким забором. Лазер находится строго внутри многоугольника на уровне земли. Высота забора h, а мощности лазера хватает на испарение градин на дальности не более d. Градины падают отвесно вниз. Дальности стрельбы достаточно для того, чтобы сбивать падающие прямо на стоянку градины до того, как они опустятся ниже уровня забора, более того, установка в порядке благотворительности сбивает даже те градины, которые не попадают на территорию стоянки. Требуется определить, сколько градин будет сбито.\nИсходные данные\nВ первой строке записано целое число n (3 ≤ n ≤ 10) — количество вершин многоугольника, и действительное число h (1.00 ≤ h ≤ 100.00) — высота забора. Следующие n строк содержат пары вещественных чисел — координаты вершин многоугольника в порядке обхода. На следующей строке находятся d (h &#60; d &#60; 1000.00) и координаты лазера. Следующая строка содержит k (1 ≤ k ≤ 100) — количество градин. Следующие k строк содержат пары вещественных чисел — координаты точек падения градин. Все координаты по модулю не превышают 1000.\nРезультат\nТребуется вывести одно число — количество сбитых в воздухе градин.' WHERE `id`='19';
			UPDATE `nwserver`.`task` SET `description`='Дан обыкновенный граф с чётным количеством ребер. Требуется определить, можно ли представить его в виде набора пар смежных (имеющих общую вершину) ребер.\nИсходные данные\nВходные данные содержат последовательность пар целых чисел. Каждая пара обозначает идентификаторы вершин одного ребра. Все идентификаторы вершин — целые числа от 1 до 1000. Граф не содержит петель и кратных рёбер.\nРезультат\nВыведите число 1, если требуемое разбиение существует, и число 0 в противном случае.' WHERE `id`='20';
			UPDATE `nwserver`.`task` SET `description`='Спецслужбы обнаружили действующего иностранного агента. Шпиона то есть. Установили наблюдение и выяснили, что каждую неделю он через Интернет посылает кому-то странные нечитаемые тексты. Чтобы выяснить, к какой информации получил доступ шпион, требуется расшифровать информацию. Сотрудники спецслужб проникли в квартиру разведчика, изучили шифрующее устройство и выяснили принцип его работы.\nНа вход устройства подается строка текста S1 = s1s2...sN. Получив ее, устройство строит все циклические перестановки этой строки, то есть S2 = s2s3...sNs1, ..., SN = sNs1s2...sN-1. Затем множество строк S1, S2, ..., SN сортируется лексикографически по возрастанию. И в этом порядке строчки выписываются в столбец, одна под другой. Получается таблица размером N × N. В какой-то строке K этой таблицы находится исходное слово. Номер этой строки вместе с последним столбцом устройство и выдает на выход.\nНапример, если исходное слово S1 = abracadabra, то таблица имеет такой вид:\naabracadabr = S11\nabraabracad = S8\nabracadabra = S1\nacadabraabr = S4\nadabraabrac = S6\nbraabracada = S9\nbracadabraa = S2\ncadabraabra = S5\ndabraabraca = S7\nraabracadab = S10\nracadabraab = S3\nИ результатом работы устройства является число 3 и строка rdarcaaaabb.\nЭто все, что известно про шифрующее устройство. А вот дешифрующего устройства не нашли. Но поскольку заведомо известно, что декодировать информацию можно (а иначе зачем же ее передавать?), Вам предложили помочь в борьбе с хищениями секретов и придумать алгоритм для дешифровки сообщений. А заодно и реализовать дешифратор.\nИсходные данные\nВ первой и второй строках находятся соответственно целое число и строка, возвращаемые шифратором. Длина строки и число не превосходят 100000. Строка содержит лишь следующие символы: a-z, A-Z, символ подчеркивания. Других символов в строке нет. Лексикографический порядок на множестве слов задается таким порядком символов:\nABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz\nСимволы здесь выписаны в порядке возрастания.\nРезультат\nВыведите декодированное сообщение в единственной строке.' WHERE `id`='21';
			UPDATE `nwserver`.`task` SET `description`='Таня почти уже вышла из дома, чтобы идти в школу, когда раздался звонок. Звонила завуч, сказала, что сегодня первые три урока не состоятся — в школе нет электричества. Таня — староста своего класса, и завуч просила передать всему классу эту новость.\n— Что же теперь делать? Времени-то практически не осталось — подумала Таня. — Ну ладно, сейчас я позвоню Лене, потом Кате, потом Маше. А Лена в это время пусть звонит Вите, она знает его телефон, а Витя пусть позвонит Маше. Нет, Маше же я сама позвоню — пусть лучше он звонит Мише. А Катя пусть позвонит Наташе... Нет, так не получится, они же вчера поссорились. Так, некогда размышлять, надо скорее звонить Лене, авось все в конце концов узнают...\nС горем пополам Таня все-таки смогла разослать новость по классу, причем получилось так, что до нескольких человек новость дошла слишком поздно, а многим позвонило, сообщая новость, сразу несколько человек. В итоге, класс в целом понес ощутимые моральные (опоздания) и материальные (лишние расходы на телефон) потери. Вечером Таня решила для подобных случаев заранее придумать план звонков, и не пускать больше такие оповещения на самотек, не зря же ее назначили старостой класса... Но задача оказалась непростой.\nПомогите Тане составить такой план звонков, с помощью которого удастся разнести новость по классу как можно скорее. При этом все ученики должны получить сообщение, но ни один не должен получить его более одного раза. Передача новости по телефону занимает ровно одну минуту. В начальный момент времени новость знает только староста.\nДля решения задачи Таня выписала список всех учеников, а так же для каждого ученика список тех учеников, кому он может позвонить. Можно считать, что если Маша может позвонить Кате, то и Катя может позвонить Маше (даже если в составленном Таней списке указана только одна из этих связей). Можно также предполагать, что по такому \"сарафанному радио\" сообщение может дойти до любого ученика класса.\nИсходные данные\nПервая строка содержит количество учеников в классе N (1 ≤ N ≤ 10). Вторая строка содержит целое число M (0 ≤ M ≤ 45). Каждая из следующих M строк содержит пару имен одноклассников, которые могут звонить друг другу, разделенных пробелом. Последняя строка содержит имя старосты. Все имена учеников различны, и состоят не более, чем из 20 заглавных и прописных латинских букв.\nРезультат\nВ первой строке — время в минутах, необходимое для передачи новости всему классу согласно предлагаемому плану. Далее выводится описание плана звонков. Звонки идущие параллельно следует объединить в группу. Группы следует упорядочить по времени. Описание каждой группы начинается со строки, содержащей количество звонков. Каждый звонок описывается в отдельной строке. Описание звонка состоит из пары имен (кто звонит, кому звонит), записанной через пробел.\n' WHERE `id`='22';
			UPDATE `nwserver`.`task` SET `description`='Программист Петров, впервые отправившийся на соревнования за пределы родного вуза, вдруг понял, как плохо работать на чужом компьютере, где даже нет любимого текстового редактора. А тут еще жюри подсунуло текст, отформатированный какой-то противным DOSовским текстовым редактором так, чтобы правые концы строк были одинаковыми. Способ форматирования был использован тот самый, единственно доступный в этом редакторе — где ни попадя были добавлены лишние пробелы. Читать такой текст — одно мучение. Хорошо еще, что на сетевом диске нашелся FAR Manager, а с помощью него все эти противные пробелы можно быстро вырезать, заменяя комбинацию из двух пробелов на один. Правда, пробелов много, и такую операцию придется повторить несколько раз — ведь после замены FAR уже не ищет заменяемую комбинацию в обработанном тексте. Поэтому, если пробелов было подряд шесть штук, то заменять два пробела на один придется трижды. Шесть пробелов заменятся на три, три на два, два на один.\nПетров уже нажал Ctrl+F7, но вдруг задумался — а может, надо заменять не два пробела на один, а сначала по три на один, а уже потом два на один? Для текста, где встречается не более пяти пробелов выйдет не хуже, а вот если пробелов может быть до десяти, то одну замену удастся сэкономить! Петров — настоящий программист, и врожденная тяга к оптимизации взяла свое. Диалог замены так и остался на мониторе, текст забыт, а Петров схватил карандаш и начал покрывать поля «Кнута» какими-то формулами. Вот ведь странный человек, вместо того чтобы заменять пробелы, сидит и что-то дифференцирует…\nЕсли и вам мешают пробелы, попробуйте найти свой способ самой быстрой замены. Предположим, что в тексте есть подстроки длиной не более чем в L пробелов (могут встречаться строки пробелов любой длины от 1 до L). Ваша задача — определить минимальное количество замен, исправляющих группы подряд идущих пробелов на один, и составить план проведения таких замен. Если таких планов несколько, то вы должны выбрать среди них оптимальный — такой, который позволяет заменить любую последовательность пробелов длины не более K (K ≥ L) для максимально возможного K. Если есть несколько оптимальных планов замены, можете вывести любой из них.\nИсходные данные\nЕдинственная строка содержит число L, L &#60; 2000000 — максимальная длина группы пробелов, которая встречается в тексте.\nРезультат\nВыведите R — минимальное число замен, а в следующих R строках должен быть описан оптимальный план проведения замен. Каждая из этих строк должна содержать длину группы пробелов, которые будут заменены на один в ходе соответствующей замены.' WHERE `id`='23';
			UPDATE `nwserver`.`task` SET `description`='— Здравствуйте! Могу я поговорить с Петровым? Алё, милый, привет… ты знаешь, у нас дома небольшая авария произошла… Но твой компьютер не пострадал, не волнуйся. Но теперь там немного грязно. Ну, то есть очень грязно. Но ты не волнуйся, я приготовила тебе твои болотные сапоги, у входа стоят. А грязь я уберу, как будет свободное время. Когда? Ну, наверное, когда в отпуск пойду. А, ну когда вернёмся из Турции. А, ну значит в следующий отпуск, но обязательно уберу. А пока я у мамы поживу. И ты, кстати, тоже можешь. Ну, как хочешь, я же не заставляю… Только пока я не убрала, ты там грязь не разводи, сильно сапогами по грязи не шлёпай и когда по чистому ходишь, сапоги снимай и тапочки обувай, я их тоже возле входа поставила, ты их бери с собой, когда идёшь по грязи и переобувай. А когда по чистому идёшь, бери сапоги, там грязь в разных местах.\nПрограммисты, как известно, не самые трудолюбивые люди, поэтому убирать грязь не станут. Но переобувать болотные сапоги каждый раз, когда переходишь от грязного пола к чистому и наоборот — удовольствие ниже среднего, уж лучше пройти лишние несколько метров. Чтобы прожить время до следующего отпуска с комфортом, надо срочно выработать способ добираться из одной точки квартиры с минимальным количеством переобуваний по пути, ну а уж среди них, конечно, выбрать самый короткий.\nДля начала, естественно, задаться нахождением способа оптимального прохождения Самого Главного Пути — от компьютера до холодильника.\nИсходные данные\nВ первой строке даны два целых числа M и N — размеры квартиры (в у.е.). 1 ≤ N, M ≤ 500. Два целых числа во второй строке — координаты компьютера (в у.е.), а два целых числа в третьей строке — координаты холодильника (тоже в у.е.). Далее идут M строк по N символов в каждой — план квартиры. На плане 1 означает чистое место, 2 — грязное, 0 — стена или непроходимая грязь. Переходить можно только на клетки, имеющие общую вершину с данной, при переходе с чистой на грязную и наоборот надо переобуваться. Холодильник и компьютер находятся не в клетках, помеченных нулём.\nЛевая верхняя клетка плана имеет координаты (1, 1).\nРезультат\nДлина кратчайшего пути (количество преодоленных квадратиков, включая начальный и конечный) с минимальным количеством переобуваний, и, через пробел, количество переобуваний (переобувание проходит при переходе с грязного на чистое и наоборот). Если пройти к холодильнику невозможно, вывести числа 0 0.' WHERE `id`='24';
			UPDATE `nwserver`.`task` SET `description`='У программиста Петрова есть хобби — собирать крышки от пивных бутылок. Ничего странного, он знает еще с сотню программистов, которые очень уважают пиво. Да, они тоже собирают крышки. Не все из них, конечно, но некоторые.\nЕсли честно, то часть своих крышек он просто купил, уже без бутылок. Да, это не совсем спортивно, зато коллекция теперь более солидная. Одна вот беда — не хватает ему для полноты коллекции еще нескольких редких крышек. Он даже нашел в Интернете программистов, которые согласны продать их ему. Некоторые даже продают крышки сразу наборами, с большой скидкой. Почему продают, да еще со скидкой? А вы попробуйте объяснить жене, какая польза от пивных крышек. Она же не программист.\nОсталось выбрать оптимальные предложения. Если объяснить жене зачем надо хранить крышки еще возможно, то почему на них надо тратить деньги — точно не поймет. Поэтому надо купить как можно дешевле.\nПетров выписал на бумажку все варианты и задумался. Купить сразу все не получится, никаких денег не хватит. Тогда надо купить самые необходимые, но подешевле. Да уж, без программы тут не обойдешься…\nИсходные данные\nВ первой строке записано число N — количество недостающих Петрову крышек (1 ≤ N ≤ 20). Далее идет N строк — цена, за которую можно купить эту крышку, если покупать ее отдельно. В следующей строке стоит число M (0 ≤ M ≤ 100) — количество предложений по продаже наборов, содержащих нужные ему крышки. Далее идет M строк описывающих эти наборы. В каждой строке первое число — цена набора, второе — количество крышек в наборе, далее перечислены номера крышек (каждый номер от 1 до N), которые в этот набор входят. Номера в наборе не повторяются. Все цены — положительные числа, не превосходящие 1000. В последней строке перечислен минимальный набор крышек, который Петров намерен купить в любом случае.\nРезультат\nВыведите минимальную сумму, необходимую Петрову, чтобы купить все крышки из приведённого в последней строке набора.' WHERE `id`='25';
			UPDATE `nwserver`.`task` SET `description`='Невероятно трудно одному человеку изучить всю галактическую историю.\nС другой стороны каждый дипломат, стремящийся занять как более значимый пост в галактической империи, должен очень хорошо ее знать. Так уронить ложку в присутствии высокопоставленных членов звездной системы Арктура, значит неслыханно их оскорбить (А разве вы не слышали, что последний конфликт между системами Арктура и Альфы Водолея разгорелся всего то из-за одного уроненного стакана).\nК счастью в Галактической Академии выяснили, что, например, для дипломатов нижнего ранга достаточно выучить только одну ветвь истории, касающуюся только того кластера звездных систем, в котором он собирается работать. (Действительно, ведь дипломаты нижнего ранга ведут переговоры только между планетами, находящимися в одном звездном кластере. И как нам раньше не приходила такая идея).\nС учетом этого очень ценного замечания было решено единый межгалактический курс истории заменить на несколько локализованных курсов, каждый из которых охватывает только ту часть истории, которая касается только одного звездного кластера. Естественно, что историю изучать надо в хронологическом порядке, начиная от зарождения человечества, поэтому историю Земли нужно включить во все сборники локализованных историй. Дальше сложнее: так звездная система Волопаса была колонизирована выходцами из системы Центавры, а значит учебник для системы Волопаса обязательно должен включать раннюю историю системы Центавра.\nДля решения вопроса о том, какие этапы истории включать или не включать в тот или иной учебник, специалисты-историки Галактической Академии разбили всеобщую межгалактическую историю на множество мелких вех. Далее все вехи были построены в одно большое дерево (тут помогли вездесущие биологи, которые, как оказалось, всегда пользовались такими деревьями). Корнем этого дерева была объявлена веха, соответствующая ранней истории Земли (до космической колонизации). Ее сыновьями являются вехи, которые соответствуют истории Звездных систем, близких к Солнечной системе (так как они были колонизированы выходцами с Земли) и т.д. Все! Для определения тех вех, которые стоит включать в учебник, осталось всего-навсего быстро определять, находится ли веха A в поддереве с корнем в вехе B.\nИсходные данные\nВ первой строке находится число N (N ≤ 40000), определяющее общее число вех. В следующих N строках находятся описания каждой из вех.\nКаждая веха описывается двумя числами: ID - уникальный числовой идентификатор вехи и ParentID - идентификатор вехи, являющейся ее отцом в данном дереве. (ParentID для корня дерева равен -1).\n(N+2)-я строка содержит число L (L ≤ 40000) - количество запросов. Следующие L строк содержат описания запросов: два различных числа A и B. Все идентификаторы лежат в пределах от 0 до 40000.\nРезультат\nДля каждого запроса в отдельной строке необходимо вывести:\n1, если веха А является корнем поддерева, содержащего веху B.\n2, если веха B является корнем поддерева, содержащего веху A.\n0, если не верно ни одно из первых двух условий.' WHERE `id`='26';
			UPDATE `nwserver`.`task` SET `description`='— Суеверия… Предрассудки… — рассеянно проговорил незнакомец. — Леность ума и зависть, зависть, поросшая волосами зависть… — Он прервал самого себя. — Простите, Александр Иванович, но я бы осмелился все-таки просить вашего разрешения убрать этот ковш. К сожалению, железо практически не прозрачно для гиперполя, а возрастание напряженности гиперполя в малом объеме…\nПосле инцидента с “идеальным потребителем” Выбегалло в НИИ ЧАВО спешно вводят автоматизированную систему безопасности. Она должна гарантировать, что в любом объеме общая интенсивность гиперполя не превышает критическую величину. На Сашу Привалова и его Алдан возложена важная задача по автоматической обработке показаний датчиков, расставленных по всему НИИ.\nВсе датчики занумерованы от 1 до N (1 ≤ N ≤ 10000). Показание i-го датчика напряженности гиперполя – это целое число (-10000 ≤ ki ≤ 10000). Алдану необходимо быстро отвечать на запросы вида: чему равна сумма напряженностей на датчиках с i-го по j-й (i ≤ j). Число запросов Q может быть очень велико (0 ≤ Q ≤ 100000).\nИсходные данные\nВ первой строке входа находится число N. Далее в следующих N строках записаны ki. Далее следует число Q и Q пар чисел i, j.\nРезультат\nдолжен содержать Q строк с суммами соответствующих показаний датчиков напряженности.' WHERE `id`='27';
			UPDATE `nwserver`.`task` SET `description`='Дольше всех задержался там некий Питирим Шварц, бывший монах и изобретатель подпорки для мушкета, беззаветно трудившийся над проектом джинн-бомбардировок. Суть проекта состояла в сбрасывании на города противника бутылок с джиннами, выдержанными в заточении не менее трех тысяч лет. Хорошо известно, что джинны в свободном состоянии способны только либо разрушать города, либо строить дворцы. Основательно выдержанный джинн (рассуждал Питирим Шварц), освободившись из бутылки, не станет строить дворцов, и противнику придется туго. Некоторым препятствием к осуществлению этого замысла являлось недостаточное количество бутылок с джиннами, но Шварц рассчитывал пополнить запасы глубоким тралением Красного и Средиземного морей.\nРазработка проекта джинн-бомбардировок перешла в экспериментальную стадию. На полигоне силами дублей научных сотрудников было возведено N городов. Город представляет собой круг фиксированного радиуса r, одинакового для всех городов. Так как М. М. Камноедов выдал для эксперимента всего 1 бутылку с джином, экспериментаторы решили, что чем больше городов будет разрушено, тем лучше для науки. Известно, что джинн разрушает все на расстоянии R от места падения бутылки. Город считается разрушенным, если он целиком попадает в зону разрушения. Перед тем, как проводить эксперимент, необходимо найти максимальное количество городов, которое может быть разрушено силами одного джинна.\nИсходные данные\nВ первой строке содержится число городов N (1 ≤ N ≤ 100). Следующие N строк содержат координаты центров городов xi, yi - целые числа, |xi|, |yi| ≤ 10000. Центры разных городов не совпадают.\nВ последней строке содержатся радиус джинн-поражения R и радиус города r — целые числа (1 ≤ R, r ≤ 10000).\nРезультат\nВыведите максимальное количество городов, которое может быть разрушено в результате бомбардировки.' WHERE `id`='28';
			UPDATE `nwserver`.`task` SET `description`='Тут принес ключи бакалавр черной магии Магнус Федорович Редькин, толстый, как всегда озабоченный и разобиженный. Бакалавра он получил триста лет назад за изобретение портков-невидимок. С тех пор он эти портки все совершенствовал и совершенствовал. Портки-невидимки превратились у него сначала в кюлоты-невидимки, потом в штаны-невидимки, и, наконец, совсем недавно о них стали говорить как о брюках-невидимках. И никак он не мог их отладить. На последнем заседании семинара по черной магии, когда он делал очередной доклад \"О некоторых новых свойствах брюк-невидимок Редькина\", его опять постигла неудача. Во время демонстрации модернизированной модели что-то там заело, и брюки, вместо того чтобы сделать невидимым изобретателя, вдруг со звонким щелчком сделались невидимыми сами. Очень неловко получилось. Однако Магнус Федорович главным образом работал над диссертацией, тема которой звучала так: \"Материализация и линейная натурализация Белого Тезиса, как аргумента достаточно произвольной функции Е не вполне представимого человеческого счастья\".\nТут он достиг значительных и важных результатов, из коих следовало, что человечество буквально купалось бы в не вполне представимом счастье, если бы только удалось найти сам Белый Тезис, а главное — понять, что это такое и где его искать.\nСогласно последней гипотезе Редькина Белый Тезис представляет из себя тройку целых чисел (A, B, C), обладающую свойством, что A^2+B^2 делится нацело на C, причем искать его нужно между квадратами двух последовательных целых чисел N и N + 1.\nИсходные данные\nсодержит единственное целое число N (2 ≤ N ≤ 30000).\nРезультат\nВыведите три различных числа A, B, C такие, что A^2+B^2 делится нацело на C и N2 ≤ A, B, C ≤ (N + 1)^2. Если существует более одной такой тройки, выведите любую. Если такой тройки не существует, выведите \"No solution\".' WHERE `id`='29';
			UPDATE `nwserver`.`task` SET `description`='— Г-голубчики, — сказал Фёдор Симеонович озадаченно, разобравшись в почерках. — Это же п-проблема Бен Б-бецалеля. К-калиостро же доказал, что она н-не имеет р-решения.\n— Мы сами знаем, что она не имеет решения, — сказал Хунта, немедленно ощетиниваясь. — Мы хотим знать, как её решать.\n— К-как-то ты странно рассуждаешь, К-кристо… К-как же искать решение, к-когда его нет? Б-бессмыслица какая-то…\n— Извини, Теодор, но это ты очень странно рассуждаешь. Бессмыслица — искать решение, если оно и так есть. Речь идет о том, как поступать с задачей, которая решения не имеет. Это глубоко принципиальный вопрос, который, как я вижу, тебе, прикладнику, к сожалению, не доступен. По-видимому, я напрасно начал с тобой беседовать на эту тему.\nЗадачи, которые не имеют решения, — это, конечно, здорово. Но иногда хочется порешать что-то, в существовании решения которого никто не сомневается. Например, представить целое число в виде отношения квадрата и куба каких-то целых чисел. Только почему она всегда имеет решение?… Ну ладно, разберётесь ;)\nИсходные данные\nЕдинственная строка содержит целое число n (1 ≤ n ≤ 10^9).\nРезультат\nВ первой строчке выведите целое число m. Во второй — целое число k. m2 должно равняться k^3·n; 1 ≤ m, k ≤ 10^100.' WHERE `id`='30';
			UPDATE `nwserver`.`task` SET `description`='После того, как открыли чудесные свойства Поля Чудес, в Стране Дураков развился огромный бюрократический аппарат. И теперь, чтобы посадить свою монетку на поле, Буратино должен собрать множество документов. Все усложняется тем, что многие из этих бумаг не дадут без предъявления некоторого набора других.\nТак как в Стране Дураков долгое время бушевала безработица, то правительство решило занять максимум населения в бюрократическом аппарате. Поэтому за выдачу одного типа документов отвечает строго один чиновник. Но все эти чиновники за время безработицы уже настолько обленились и разучились работать, что соглашаются выдавать документы только по одному дню в неделю. Не удивительно, что очереди становились такими, что нужно было простоять целый день у одного кабинета, чтобы получить бумагу, и после этого совсем не оставалось времени, чтобы получить ещё что-то в этот же день.\nЕстественно, что Буратино хочет получить прибыль от своих вложений как можно быстрее, поэтому он решил получить необходимый набор документов как можно быстрее. Для этого он обошел приёмные всех чиновников и занумеровал их от 1 до N включительно. А также записал для каждого кабинета номер приёмного дня недели и набор номеров тех чиновников, от которых нужно получить бумаги, прежде чем идти на приём.\nПодумав некоторое время, Буратино так и не смог найти оптимального решения своей задачи. И тогда он пообещал половину будущей прибыли тому, кто сможет помочь ему в этом.\nИсходные данные\nВ первой строке записано количество чиновников в Стране Дураков N (1 ≤ N ≤ 100) и количество дней в неделе по календарю Страны Дураков L (1 ≤ L ≤ 100). В следующей строке перечислены номера приёмных дней чиновников Ai (1 ≤ Ai ≤ L). Далее N строк описывают наборы документов, необходимых для получения соотв. документа. Набор документов состоит из чисел, разделённых пробелами. Известно, что в i-й строке нет документа с номером i. Каждая строка завершается 0, что означает конец набора. Если набор пустой, то документ можно получить, ничего дополнительно не предъявляя. После этих строк содержится одно число — текущий день недели K (1 ≤ K ≤ L). В следующей строке содержится список уже имеющихся у Буратино документов на текущий день. Список состоит из чисел, разделённых пробелами, и завершается 0. Затем в таком же формате дан список документов, которые требуется получить.\nХоть Страна Дураков и имеет такой, казалось бы, идеальный источник дохода, но из-за созданной волокиты и государство не может получить огромную часть, причитающихся ему налогов. В результате денег хватило только на содержание одного офиса, а, значит, не может работать больше одного чиновника одновременно.\nРезультат\nВ случае если невозможно получить необходимый набор документов, выведите «No Solution». Иначе выведите минимальное количество дней, не считая текущий, которое уйдёт для получения всего набора, и в следующей строке перечислите в хронологическом порядке все получаемые документы через пробел. Если есть несколько вариантов ответа с одинаковым минимальным временем, то можно вывести любой из них.' WHERE `id`='31';
			UPDATE `nwserver`.`task` SET `description`='Современные дети развиваются очень быстро. Вот и в детском саду, в который ходят ровно k мальчиков и столько же девочек, некоторым мальчикам очень нравятся некоторые девочки. Но в этом возрасте они еще рыцари, поэтому если какому-то мальчику нравится девочка, то только одна, и более того, одна и та же девочка может нравиться не более чем одному мальчику. Но и девочки в этом возрасте леди, поэтому если девочке кто-то и нравится, то только один, и разным девочкам нравятся разные мальчики.\nДети непосредственны, поэтому их детские влюбленности не являются тайной для воспитательницы. Однажды группа собиралась на прогулку и воспитательница решила поставить детей в пары так, чтобы в каждой паре, в которой есть влюбленный малыш, либо мальчику нравилась его напарница, либо девочке нравился напарник. Помогите воспитательнице образовать пары соответствующим образом. Можно считать, что мальчики и девочки занумерованы целыми числами от 1 до k.\nИсходные данные\nВ первой строке k — количество мальчиков (1 ≤ k ≤ 250 000). Во второй строке приведены номера девочек, которые нравятся мальчикам, на i-м месте номер девочки, нравящейся i-му мальчику; если ему никто не нравится, то номер равен 0. Числа разделены пробелами. В третьей строке дана аналогичная информация о девочках.\nРезультат\nВыведите последовательность из k чисел. Число, находящееся на i-м месте последовательности является номером девочки, с которой стоит в паре i-й мальчик. Числа разделяются пробелами.' WHERE `id`='32';
			UPDATE `nwserver`.`task` SET `description`='Однажды ночью, совершая привычную пробежку по кухне, таракан Вася увидел на полу замечательную крошку. Вся тараканья сущность подсказывала Васе, что до крошки необходимо добраться, потратив минимум своей жизненной энергии, а значит как можно за меньшее количество тараканьих шажков. И даже небольшой Васин мозг хорошо понимал, что для этого необходимо чётко рассчитать свою траекторию.\nИсходные данные\nВ первой строке находятся 4 числа X, Y, A, R — координаты таракана в начальный момент, угол его направления движения в начальный момент и минимальный радиус поворота таракана (неужели вы думали, что тараканы умеют на месте разворачиваться?). Во второй строке находятся ещё два числа KX и KY — координаты желанной крошки.\nКоординаты у тараканов отсчитываются от центра кухни и измеряются в тараканьих шажках. Также стоит отметить, что поскольку ног у таракана целых шесть, то мера это достаточно условная, поэтому не стоит думать, что таракан может пробежать лишь целое число шажков. К примеру, 314.15 шажков — это привычная для Васи длина его ночной прогулки.\nВсе координаты X, Y, KX, KY и радиус R не превосходят по модулю 10000. Угол отсчитывается, как это обычно принято у тараканов, против часовой стрелки, начиная от оси OX. Он задан в градусах (вот о радианах тараканы не знают) и лежит в пределах от 0 до 360.\nРезультат\nНеобходимо найти длину кратчайшей траектории, по которой таракан Вася может добраться до желанной крошки. Результат необходимо вывести с точностью 4 знака после десятичной точки.' WHERE `id`='33';
			UPDATE `nwserver`.`task` SET `description`='Майор (М): И вы утверждали, что ваш прибор сможет облететь землю несколько раз и ошибиться не больше чем на пару сантиметров?\nКонструктор (К): Да! наша система автономной навигации по гравитационным полям совершенно ...\nМ: к тому же он не фиксируется приборами наблюдения и не содержит приемника и передатчика.\nИнженер (И): ну вы же сами просили, чтобы никто не мог увидеть прибор и...\nМ: мы дали ему простейшее задание - облёт местности по квадрату. И он не вернулся в исходную точку.\nК: а квадрат большого размера?\nМ: вас это не касается! и вообще это государственная тайна! Ваша задача - найти прибор!\nПрограммист (П): а как вы задали программу полёта?\nМ: аппарат должен был пролететь ровно одну у.е. на север, потом столько же на восток, потом - на юг и на запад. С расчетного времени возвращения прошло уже больше сорока минут. Если его найдут раньше нас... Одним словом, вы должны его найти.\nК: а, понятно, а в какой точке вы его запускали?\n(майор делает знак и через две секунды конструктор лежит на полу с заломленными за спину руками, в затылок ему упираются стволы автоматов)\nМ: Зачем вам нужна эта информация?\nИ: вы не так поняли! Нам не нужна информация, но если мы узнаем координаты запуска, мы сможем сказать, где сейчас аппарат…\n(через две секунды в затылок лежащему инженеру тоже упираются стволы)\nМ: для кого вам нужна информация? у кого аппарат! Считаю до пяти!\nП: да поймите, если, например, аппарат прилетел на северный полюс, то дальше он не может лететь ни на север ни на восток, только на юг! Где аппарат находится сейчас, зависит от того, откуда он стартовал!\n(майор наводит пистолет на программиста и ненадолго задумывается)\nМ: нет это учитывали. До полюсов он не долетал.\nП: давайте я сейчас быстро составлю программу, которая может рассчитать конечные координаты. Вы сами введете широту, долготу и длину вашей у.е., программа вам выдаст ответ с соблюдением полной секретности.\nМ: Я дам вам шанс. У вас троих есть компьютер и пять часов, то есть, уже чуть меньше. Если за это время мы не получим координаты... Одним словом, вы пострадаете первыми.\nИсходные данные\nВ первой строке находится начальная широта W, –90 &#60; W &#60; 90. Во второй строке находится начальная долгота L, -180 &#60; L ≤ 180. В третьей строке находится длина квадрата, по которому должен был пролететь аппарат. длина задана в километрах. Аппарат летит на фиксированном расстоянии 6400 км от центра масс земли. Южный полюс находится на широте -90, северный - на широте 90. Направление на восток отсчитывается в положительную сторону от нулевого меридиана.\nРезультат\nСледует вывести широту и долготу конечного положения аппарата с точностью три знака после десятичной точки.' WHERE `id`='34';
			UPDATE `nwserver`.`task` SET `description`='Связать веник не так уж и трудно. А поскольку спрос на этот высокотехнологичный продукт огромен, то фирмы, производящие веники, должны владеть немалым количеством фабрик. Помогите одной из таких фирм оптимально распределить производство между фабриками. На каждой из фабрик за день могут связать от 0 до K веников. Экономисты фирмы доказали, что себестоимость связанных веников различна: в большинстве случаев чем больше веников свяжет фабрика, тем меньшую себестоимость будет иметь последний связанный веник. Однако могут существовать и более сложные ситуации. В первом приближении вы можете считать зависимость себестоимости веника от его номера линейной.\nИсходные данные\nПервая строка содержит целые числа N и M (1 ≤ N, M ≤ 1000) — количество фабрик и количество веников, которое нужно связать.\nЗатем следует описание фабрик. В (i+1)-й строке даны параметры i-й фабрики Ki, Pi и Qi (1 ≤ Ki ≤ 100; 0 ≤ Pi, Qi ≤ 1000) — максимальное количество веников, которое можно связать за день на i-й фабрике, себестоимость первого веника и себестоимость Ki-го веника на i-й фабрике. Как упоминалось выше, стоимость производства j-го веника линейно зависит от j.\nРезультат\nЕсли фирма не может произвести нужное число веников, выведите максимальное количество веников V, которое может быть произведено.\nКроме того, требуется вывести суммарную стоимость производства M (или V, если невозможно произвести M) веников при оптимальном распределении производства с двумя знаками после десятичной точки.\nФормат вывода должен быть таким, как указано в примерах ниже.' WHERE `id`='35';
			UPDATE `nwserver`.`task` SET `description`='12 Месяцев кружат свой небесный хоровод. Один за другим они занимают трон — от самого молодого и свирепого Января до пожилого и мудрого Декабря. Уходя, каждый Месяц громко выкрикивает цифру. За год из цифр складывается 12-значное число. Старый Год использует это число как щит на своём пути в Бездну Времени, защищаясь им от кошмарных созданий Вечности. От ударов щит разлетается на куски, соответствующие делителям числа.\nВаша задача — помочь Месяцам выковать для Старого Года щит, который нельзя было бы разбить на куски.\nИсходные данные\nВ первой строке находится число уже ушедших Месяцев. Во второй — названные ими числа.\nРезультат\nВывести любое 12-значное число, начинающееся с заданных цифр и не имеющее нетривиальных делителей. Гарантируется, что ответ есть.' WHERE `id`='36';
			UPDATE `nwserver`.`task` SET `description`='В очередной раз посадил дед репку. Каждый год он сажал по репке и каждый год одна и та же история — вырастает не репка, а настоящий гигант. То ли удобрения у деда качественные, то ли фамилия деда Мичурин, то ли соседство с атомной станцией не проходит бесследно. Как водится, выросла репка большая-пребольшая, а вытаскивать ее опять деду.\nПопробовал дед обратиться за помощью к бабке, но ту еще с прошлого урожая разбил радикулит, внучку пришлось лечить в Швейцарии (дорого обошлась деду та репка), а у жучки, кошки и мышки образовалась аллергия на корнеплоды.\nЗагоревал дед. А что делать! Репку тащить-то надо!\nИ вспомнил он про книжечку заветную, что лежала у него на чердаке — про учебник Пёрышкина по физике для средней школы. И вспомнил дед, что в той книжке описывается замечательная вещь — блоки, с помощью которых можно собрать конструкцию, заменяющую собой в вопросах вытаскивания репки и бабку, и внучку, и жучку, и кошку, и мышку.\nДостал дед учебник, почитал, — и собрал. И задумался: а насколько эта система поможет выиграть ему в силе? Сидит на крылечке, думает…\nБлок представляет собой колесо, через которое перекинута верёвка, и к оси которого привязана ещё одна верёвка. Если верёвка, привязанная к оси уходит вверх, а концы, перекинутой верёвки смотрят, соответственно вниз, то это блок первого типа. Если же верёвка, привязанная к оси уходит вниз, а концы, перекинутой верёвки смотрят, соответственно вверх, то это блок второго типа.\nПомогите деду по заданной конфигурации блоков первого и второго типов определить получаемый выигрыш в силе, пока урожай не сгнил. Блоки можно считать невесомыми, а верёвки невесомыми и нерастяжимыми. Два блока, соединённые верёвкой, находятся на разной высоте.\nИсходные данные\nВ первой строке находится число N (1 ≤ N ≤ 32) — количество блоков. Блоки пронумерованы числами от 1 до N. В последующих N строках описываются сами блоки следующим образом: T X1 X2 Y, где T – тип блока (1 или 2), X1 и X2 – номера блоков, к которым идут концы верёвки, перекинутой через текущий блок, Y – номер блока, к которому идёт верёвка, привязанная к оси текущего блока. Однако есть несколько исключений:\nНекоторые уходящие вверх от блоков верёвки крепятся непосредственно к потолку теплицы. (Дед выращивал репку в теплице) В этом случае вместо номера блока, к которому идёт верёвка, указывается число 0.\nРовно одна уходящая от блока вниз верёвка ведёт к репке массой 1 кг. В этом случае в строке описания I-го блока вместо номера блока указывается число –1.\nРовно одна уходящая от блока вниз верёвка остаётся свободной. В этом случае, строке описания I-го блока, вместо номера блока указывается число –2.\nВсе верёвки вертикальны.\nРезультат\nВам необходимо вывести массу груза (с точностью 4 знака после десятичной точки), которую необходимо подвесить к свободной верёвке, чтобы система блоков пришла в равновесие. Если такой массы не существует, то вывести строку «No solution». Если подойдёт любая масса, то вывести строку «Any».' WHERE `id`='37';
			UPDATE `nwserver`.`task` SET `description`='Однажды один ветеран АСМ-соревнований задумавшись о подрастающем поколении, решил помочь им в освоении тайн и тонкостей спортивного программирования. Решил он создать страничку в Internet, на которой бы помещал статьи на различные программистские темы, описания интересных задачек, их решений, и, конечно же, исходные тексты решений. Но вот ведь незадача! Прекрасные тексты его замечательных решений на страничке выглядят блекло и уныло, совсем не так, как в его любимой среде разработке: ключевые слова не выделяются, комментарии ничем не отличаются от кода программы… Ничего не радует глаз.\nБудучи знакомым с основами HTML, он знает, что добавление вручную тегов разметки, которые бы раскрасили синтаксис его программ, — жутко трудоёмкое и неинтересное занятие, на которое он точно никогда не решится.\n— А вот написать программу, которая бы делала это всё за меня — раз плюнуть! — подумал он. — …или может не раз плюнуть… — …или может лучше всё-таки вручную как-нибудь… — …или может.… Эврика! Раз уж эта задачка мне оказалась не под силу, то нужно дать её на одном из ближайших АСМ соревнований — там-то её точно кто-нибудь решит! — …а если с ошибками решат … — …всё равно пусть попробуют!…\nИсходные данные\nДан текст корректной программы на языке Паскаль. Длина входного текста не более 100 000 символов.\nРезультат\nНеобходимо вставить теги форматирования, чтобы можно было нужным образом раскрасить исходный текст данной на вход программы при помощи HTML. Для этого следует выполнить следующие условия:\nВсе комментарии должны быть заключены в пару тегов “&#60;span class=comment&#62;” и “&#60;/span&#62;”.\nВсе ключевые слова должны быть заключены в пару тегов “&#60;span class=keyword&#62;” и “&#60;/span&#62;”.\nВсе строки должны быть заключены в пару тегов “&#60;span class=string&#62;” и “&#60;/span&#62;”.\nВсе числа должны быть заключены в пару тегов “&#60;span class=number&#62;” и “&#60;/span&#62;”.\nЕсли ключевые слова, строки или числа попали в комментарии, то они считаются частью комментария и не считаются ключевыми словами, стоками или числами.\nЕсли ключевые слова, комментарии или числа попали в строки, то они считаются частью строки и не считаются ключевыми словами, комментариями или числами.\nСтрока — это последовательность символов ограниченная апострофами («’»), не содержащая внутри других апострофов. Либо символ решётка («#»), следом за которым идет непустая последовательность цифр. Во втором случае последовательность необходимо брать максимальную. То есть в последовательности символов “#123” подстрока “#1” не является строкой, в то время, как вся последовательность “#123” строкой является.\nЧисла начинаются с цифры, заканчиваются цифрой и внутри могут содержать лишь цифры и, возможно, одну точку («.»). Так же в случае со строкой, числом называется именно максимальная по включению последовательность символов, удовлетворяющая описанному правилу.\nИдентификатор может начинаться с буквы либо знака подчёркивания и содержать буквы, цифры и знаки подчёркивания. Аналогично строке и числу, идентификатором называется лишь максимальная по включению, строка, удовлетворяющая данным требованиям.\nЕсть комментарии двух типов: комментарий первого типа начинается с ‘{’ и оканчивается ‘}’, обе скобки - часть комментария; комментарий второго типа начинается с ‘//’ и оканчивается переводом строки, слэши — часть комментария, а перевод строки — нет. Вложенные комментарии являются частью внешних комментариев.\nКлючевые слова - это следующие идентификаторы: \'and\', \'array\', \'begin\', \'case\', \'class\', \'const\', \'div\', \'do\', \'else\', \'end\', \'for\', \'function\', \'if\', \'implementation\', \'interface\', \'mod\', \'not\', \'of\', \'or\', \'procedure\', \'program\', \'record\', \'repeat\', \'shl\', \'shr\', \'string\', \'then\', \'to\', \'type\', \'unit\', \'until\', \'uses\', \'var\', \'with\', \'while\'.\nТут каждое ключевое слово заключено в апострофы, которые не следует считать частями ключевых слов. Ключевые слова показаны в нижнем регистре, но на самом деле они могут встречаться в тексте в любом регистре. Например, ImPlEmentAtioN — это ключевое слово.' WHERE `id`='38';
			UPDATE `nwserver`.`task` SET `description`='Всем известно, что область определения любой непрерывной функции можно разбить на интервалы, на которых функция монотонно возрастает или убывает. Назовём сложностью разбиения количество интервалов в нём. Тогда сложность непрерывной функции — это минимально возможная сложность разбиения области определения на интервалы монотонности.\nПонятие сложности может быть введено не только для непрерывных функций. Например, это можно сделать для функций, определённых на сетке.\nИсходные данные\nВвод содержит описание функции F, определённой на сетке. Первая строка содержит 2 числа A и B — начало и конец целочисленной сетки с шагом 1 (0 ≤ A &#60; B ≤ 100 000). Во второй строке перечислена таблица значений функции F. Таблица состоит из целых чисел F(A), F(A+1), …, F(B), разделённых пробелами и/или переводами строк. Все значения функции F лежат в диапазоне от –100 000 до 100 000.\nРезультат\nВыведите единственное число — сложность функции F.' WHERE `id`='39';
			UPDATE `nwserver`.`task` SET `description`='В последнее время много пользователей начало вести интернет-дневники — блоги. Пользователи пишут дневники и изредка читают чужие. Пользователи эти отличаются от среднестатистических граждан, в частности тем, что обожают считать своих виртуальных друзей. Другом они называют любого, кто читает их писанину. Считается, что один пользователь читает блог другого, если он упомянул его в своем блоге.\nДля каждого пользователя выведите список его друзей, людей, которые считают данного пользователя своим другом, и список взаимных друзей, то есть тех, кто является другом данного пользователя, и считает его своим другом.\nДаны блоги всех этих пользователей. Требуется выдать для каждого пользователя указанные три списка. Пользователи помечают своих друзей тэгом &#60;friend&#62;. Тэгом называется строка, состоящая из строчных латинских букв, окруженных символами меньше (&#60;) и больше (&#62;). Закрывающимся тэгом называется строка, состоящая из строчных латинских букв, окруженных символами меньше и слэшем (&#60;/) в начале и больше (&#62;) в конце.\nИсходные данные\nВ первой строке указано число N (1 ≤ N ≤ 100) — количество блогов во входных данных. В первой строке каждого блога указано имя блоггера, создавшего этот дневник. Все имена авторов блога различны. Следующая строка начинается с тэга &#60;blog&#62;. Последняя строка блога заканчивается закрывающимся тэгом &#60;/blog&#62;. В тексте блога нет других тэгов &#60;blog&#62;. Для каждого открывающегося и закрывающегося тэга в тексте присутствует соответствующий ему парный тэг. Символы больше, меньше и слэш появляются только в тэгах. Во входных данных встречаются только строчные и заглавные латинские буквы, цифры, символы больше, меньше, слэш, точка, запятая, символ подчеркивания. Имена друзей регистро­чувствительны. Тэг нельзя разорвать переводом строки. Имя «друга» может состоять из строчных и заглавных латинских букв и символа подчеркивания. Имя «друга» не может быть пусто. Длина строки блога не превышает 255 символов. Блог содержит не более 1000 строк. Число людей, упоминаемых в блогах, не превышает 100.\nРезультат\nДля каждого блоггера, блог которого присутствует во входных данных, вы должны вывести списки тех, чьи блоги он упомянул (друзья), тех, кто упомянул его в своем блоге (в друзьях), и тех, кто есть как в первом списке, так и во втором. Каждый список нужно приводить в отдельной строке, упорядоченный по алфавиту. Имена в списке разделяются запятой и пробелом. Перед списком «друзей» необходимо вывести строку «1: ». Перед списком «в друзьях» необходимо вывести строку «2: ». Перед списком «взаимных друзей» необходимо вывести строку «3: ». Перед этими тремя списками необходимо вывести имя блоггера, а перед ним — пустую строку (если это не первый блоггер). Блоггер не является своим другом, даже если упомянул себя в своем блоге.' WHERE `id`='40';
			UPDATE `nwserver`.`task` SET `description`='Козла пустили в огород. К несчастью для козла, его крепко-накрепко привязали к точке C крепчайшей альпинистской верёвкой длины L (То есть козёл может кушать травку, удалённую от точки C не более чем на L метров). И только одно скрасило жизнь бедного козла — недалеко от него виднеется грядка так любимых им ананасов, представляющая собой отрезок прямой с концами в точках A и B.\nХм… Интересно, на сколько козлу придётся растянуть крепчайшую альпинистскую верёвку, чтобы добраться хотя бы до одного ананасика? А чтобы съесть все ананасы?\nИсходные данные\nНа входе находятся координаты точек А, B, С и длина верёвки L. Все числа целые, L ≥ 0, все координаты не превосходят по модулю 10000. Числа разделены пробелами или переводами строк.\nРезультат\nВ первой строке вывести минимальную длину, на которую козлу придётся растянуть верёвку, чтобы дотянуться до грядки с ананасами. Во второй строке вывести минимальную длину, на которую козлу придётся растянуть верёвку, чтобы добраться до всех ананасов с грядки. Все числа выводить с точностью до 2-х знаков после десятичной точки.' WHERE `id`='41';
			UPDATE `nwserver`.`task` SET `description`='Стоит себе ферма. На ферме сидит фермер и считает, сколько кого есть у него на ферме - a верблюдов, b баранов, с зеленых тараканов. Почему-то an + bn = cn. Известно n. Найти все остальное.\nИсходные данные\nn (0 ≤ n ≤ 100)\nРезультат\nТри различных целых числа (а, b, c) таких, что аn + bn = cn, 1 ≤ a, b, c ≤ 100. Если решений несколько, вывести то, где a минимально. Если и таких несколько, вывести то, где минимально b и т.д. Вывести −1, если решения нет.' WHERE `id`='42';
			UPDATE `nwserver`.`task` SET `description`='Опасно есть в столовой — можно отравиться несвежими продуктами, и вообще — опасно. Причём один человек может впасть в кому от столовской курицы, а другому хоть бы хны. И наоборот. Еду в столовой готовят из M разных продуктов. Всего в меню N продуктов, но не все они есть на раздаче. Допустим, что едят эту еду K + 1 студентов и для каждого из них известно, какими продуктами он может отравиться. Первым, естественно, ест самый хитрый — тот, кто пролез без очереди. И он, допустим, не отравился. Как тогда обед подействует на остальных?\nИсходные данные\nВ первой строке находится одно число N (1 ≤ N ≤ 100). В следующих N строках названия продуктов — непустые последовательности латинских букв и цифр длиной не более 40 символов. Затем следует число K (1 ≤ K ≤ 100), за которым идёт K + 1 блоков, описывающих продукты из меню, опасные для посетителей столовой. i-й такой блок начинается строкой с числом Ni — количеством продуктов, вслед за которым идёт Ni строк с названиями опасных продуктов (0 ≤ Ni ≤ N). Первый блок описывает продукты, опасные для самого хитрого студента, следующие K блоков — для всех остальных. Вход заканчивается строкой, содержащей число M (0 ≤ M ≤ N).\nРезультат\nВыведите K строк — в i-й строке:\nYES, если обед будет полностью безвреден для (i + 1)-го студента,\nNO, если среди имеющихся продуктов есть вредный для (i + 1)-го студента,\nMAYBE, если при таких исходных данных возможна и та, и другая ситуация' WHERE `id`='43';					
        </sql>
    </changeSet>
</databaseChangeLog>
